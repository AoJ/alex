#!/bin/bash
# encoding: utf-8

# """
# This script creates a fully expanded decoding graph (HCLG),
# which is domain dependent.
#
# The HCLG graph represents language model,
# pronunciation dictionary (lexicon),
# phonetic context-dependency and HMM structure.
#
# The output is a Finite State Transduser (FST),
# that has word-ids on the output, pdf-ids on the input.
# The pdf-ids are indexes that resolve to Gaussian Mixture Models.
# See http://kaldi.sourceforge.net/graph_recipe_test.html.
# """
# renice 20 $$

# FIXME describe how to use it
if [ -f path.sh ]; then . ./path.sh; fi


###########################
#  mkgraph.sh parameters  #
###########################
N=3
P=1
reverse_h=false

#####################
#  prepare_lang.sh  #
#####################

# Begin configuration section.
num_sil_states=5
num_nonsil_states=3
position_dependent_phones=true
# position_dependent_phones is false also when position dependent phones and word_boundary.txt
# have been generated by another source
reverse_lexicon=false
share_silence_phones=false  # if true, then share pdfs of different silence
                            # phones together.
sil_prob=0.5
make_individual_sil_models=false # enforce individual models for all silence phones
# end configuration sections


if [ $# -ne 9 ]; then
  echo "usage: build_hclg.sh <AM.mdl> <Dtree> <dict.txt> <vocab.txt> <LM.arpa> <local-tmp-dir> <out-lang-dir> <out-models-dir> <OOV>"
  echo "e.g.: build_hclg.sh final.mdl tree final.dict final.vocab final.bg.arpa data/local data/lang models '_SIL_'"
  echo ""
  echo "<local-tmp-dir>/dict should be filled with the following files:"
  echo " extra_questions.txt  lexicon.txt nonsilence_phones.txt  optional_silence.txt  silence_phones.txt"
  echo "See http://kaldi.sourceforge.net/data_prep.html#data_prep_lang_creating and "
  echo "http://kaldi.sourceforge.net/graph_recipe_test.html for more info."
  echo ""
  echo "options: "
  echo "     -N <number of phone in context>                 # default: 3, #phones in context model."
  echo "     -P <'central' phone in context>                 # defalut: 1, for triphones the central phone."
  echo "                                                     #  -N 1 -P 0   -> are monophones"
  echo "                                                     #  -N 3 -P 1   -> are standard triphones"
  echo "     --num-sil-states <number of states>             # default: 5, #states in silence models."
  echo "     --num-nonsil-states <number of states>          # default: 3, #states in non-silence models."
  echo "     --position-dependent-phones (true|false)        # default: true; if true, use _B, _E, _S & _I"
  echo "                                                     # markers on phones to indicate word-internal positions. "
  echo "     --reverse-lexicon (true|false)                  # reverse lexicon."
  echo "     --share-silence-phones (true|false)             # default: false; if true, share pdfs of "
  echo "                                                     # all non-silence phones. "
  echo "     --sil-prob <probability of silence>             # default: 0.5 [must have 0 <= silprob < 1]"
  echo "     --make-individual-sil-models (true|false)       # default: false; make non-{shared,split} states for each silphone"
  exit 1;
fi


. utils/parse_options.sh


model=$1
tree=$2
dictionary=$3
vocabulary=$4
lm_arpa=$5


locdata=$6
locdict=$locdata/dict
tmpdir=$locdata/lang
lang=$7
dir=$8

oov_word=$9  # prepare_lang.sh <UNK>


reverse=$reverse_lexicon  # FIXME hack for not renaming $reverse in prepare_lang.sh


#######################################################################
#                     Vystadial_create_LM_dict.sh                     #
#######################################################################
# run.sh:34 local/vystadial_create_LMs_dict.sh || exit 1
#!/bin/bash
# Copyright (c) 2013, Ondrej Platek, Ufal MFF UK <oplatek@ufal.mff.cuni.cz>
# based on egs/voxforge script created by  Vassil Panayotov Copyright 2012, Apache 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
# WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
# MERCHANTABLITY OR NON-INFRINGEMENT.
# See the Apache 2 License for the specific language governing permissions and
# limitations under the License. #

mkdir -p $locdata

echo "=== Preparing the dictionary ..."

mkdir -p $locdict
cp $vocabulary $locdata/vocab-full.txt   # TODO is it further needed

echo "--- Searching for OOV words ..."
gawk 'NR==FNR{words[$1]; next;} !($1 in words)' \
  $dictionary $locdata/vocab-full.txt |\
  egrep -v '<.?s>' > $locdict/vocab-oov.txt

gawk 'NR==FNR{words[$1]; next;} ($1 in words)' \
  $locdata/vocab-full.txt $dictionary |\
  egrep -v '<.?s>' > $locdict/lexicon-iv.txt

wc -l $locdict/vocab-oov.txt
wc -l $locdict/lexicon-iv.txt

# HANDLING OOV WORDS: OOV   SPN    UNKnow has pronancuation SPoken Noise
# Kaldi has special symbols SPN (Spoken Noise), NSN (Non Spoken Noise)
# and LAU (LAUGHTER)
echo "OOV SPN" > $locdict/lexicon-oov.txt
echo "_SIL_ NPN" >> $locdict/lexicon-oov.txt
echo "_INHALE_ NPN" >> $locdict/lexicon-oov.txt
echo "_LAUGH_ LAU" >> $locdict/lexicon-oov.txt
echo "_EHM_HMM_ NPN" >> $locdict/lexicon-oov.txt
echo "_NOISE_ NPN" >> $locdict/lexicon-oov.txt

cat $locdict/lexicon-oov.txt $locdict/lexicon-iv.txt |\
  sort > $locdict/lexicon.txt

echo "--- Prepare phone lists ..."
echo SIL > $locdict/silence_phones.txt
echo SIL > $locdict/optional_silence.txt

grep -v -w sil $locdict/lexicon.txt | \
  awk '{for(n=2;n<=NF;n++) { p[$n]=1; }} END{for(x in p) {print x}}' |\
  sort > $locdict/nonsilence_phones.txt

echo "--- Adding SIL to the lexicon ..."
echo -e "!SIL\tSIL" >> $locdict/lexicon.txt

# Some downstream scripts expect this file exists, even if empty
touch $locdict/extra_questions.txt

echo "*** Dictionary preparation finished!"


#######################################################################
#                        utils/prepare_lang.sh                        #
#######################################################################
#run.sh:37 utils/prepare_lang.sh data/local/dict 'OOV' data/local/lang $lang || exit 1
#!/bin/bash
# Copyright 2012-2013  Johns Hopkins University (Author: Daniel Povey);
#                      Arnab Ghoshal
# This script prepares a directory such as data/lang/, in the standard format,
# given a source directory containing a dictionary lexicon.txt in a form like:
# word phone1 phone2 ... phoneN
# per line (alternate prons would be separate lines), or a dictionary with probabilities
# called lexiconp.txt in a form:
# word pron-prob phone1 phone2 ... phoneN
# (with 0.0 < pron-prob <= 1.0); note: if lexiconp.txt exists, we use it even if
# lexicon.txt exists.
# and also files silence_phones.txt, nonsilence_phones.txt, optional_silence.txt
# and extra_questions.txt
# Here, silence_phones.txt and nonsilence_phones.txt are lists of silence and
# non-silence phones respectively (where silence includes various kinds of
# noise, laugh, cough, filled pauses etc., and nonsilence phones includes the
# "real" phones.)
# In each line of those files is a list of phones, and the phones on each line
# are assumed to correspond to the same "base phone", i.e. they will be
# different stress or tone variations of the same basic phone.
# The file "optional_silence.txt" contains just a single phone (typically SIL)
# which is used for optional silence in the lexicon.
# extra_questions.txt might be empty; typically will consist of lists of phones,
# all members of each list with the same stress or tone; and also possibly a
# list for the silence phones.  This will augment the automtically generated
# questions (note: the automatically generated ones will treat all the
# stress/tone versions of a phone the same, so will not "get to ask" about
# stress or tone).

# This script adds word-position-dependent phones and constructs a host of other
# derived files, that go in data/lang/.

# # Begin configuration section.
# num_sil_states=5
# num_nonsil_states=3
# position_dependent_phones=true
# # position_dependent_phones is false also when position dependent phones and word_boundary.txt
# # have been generated by another source
# reverse=false
# share_silence_phones=false  # if true, then share pdfs of different silence
#                             # phones together.
# sil_prob=0.5
# make_individual_sil_models=false # enforce individual models for all silence phones
# # end configuration sections
#
# . utils/parse_options.sh
#
# if [ $# -ne 4 ]; then
#   echo "usage: utils/prepare_lang.sh <dict-src-dir> <oov-dict-entry> <tmp-dir> <lang-dir>"
#   echo "e.g.: utils/prepare_lang.sh $locdict <SPOKEN_NOISE> $tmpdir $lang"
#   echo "<dict-src-dir> should contain the following files:"
#   echo " extra_questions.txt  lexicon.txt nonsilence_phones.txt  optional_silence.txt  silence_phones.txt"
#   echo "See http://kaldi.sourceforge.net/data_prep.html#data_prep_lang_creating for more info."
#   echo "options: "
#   echo "     --num-sil-states <number of states>             # default: 5, #states in silence models."
#   echo "     --num-nonsil-states <number of states>          # default: 3, #states in non-silence models."
#   echo "     --position-dependent-phones (true|false)        # default: true; if true, use _B, _E, _S & _I"
#   echo "                                                     # markers on phones to indicate word-internal positions. "
#   echo "     --reverse (true|false)                          # reverse lexicon."
#   echo "     --share-silence-phones (true|false)             # default: false; if true, share pdfs of "
#   echo "                                                     # all non-silence phones. "
#   echo "     --sil-prob <probability of silence>             # default: 0.5 [must have 0 <= silprob < 1]"
#   echo "     --make-individual-sil-models (true|false)       # default: false; make non-{shared,split} states for each silphone"
#   exit 1;
# fi

# oov_word=$2
mkdir -p $lang $tmpdir $lang/phones

# [ -f path.sh ] && . ./path.sh

! utils/validate_dict_dir.pl $locdict && \
  echo "*Error validating directory $locdict*" && exit 1;

if [[ ! -f $locdict/lexicon.txt ]]; then
  echo "**Creating $lang/lexicon.txt from $lang/lexiconp.txt"
  perl -ape 's/(\S+\s+)\S+\s+(.+)/$1$2/;' < $locdict/lexiconp.txt > $locdict/lexicon.txt || exit 1;
fi
if [[ ! -f $locdict/lexiconp.txt ]]; then
  echo "**Creating $locdict/lexiconp.txt from $locdict/lexicon.txt"
  perl -ape 's/(\S+\s+)(.+)/${1}1.0\t$2/;' < $locdict/lexicon.txt > $locdict/lexiconp.txt || exit 1;
fi

if ! utils/validate_dict_dir.pl $locdict >&/dev/null; then
  utils/validate_dict_dir.pl $locdict  # show the output.
  echo "Validation failed (second time)"
  exit 1;
fi


if $position_dependent_phones; then
  # Create $tmpdir/lexicon.original from $locdict/lexicon.txt by
  # adding the markers _B, _E, _S, _I depending on word position.
  # In this recipe, these markers apply to silence also.
  # Do this starting from lexiconp.txt only.


  perl -ane '@A=split(" ",$_); $w = shift @A; $p = shift @A; @A>0||die;
         if(@A==1) { print "$w $p $A[0]_S\n"; } else { print "$w $p $A[0]_B ";
         for($n=1;$n<@A-1;$n++) { print "$A[$n]_I "; } print "$A[$n]_E\n"; } ' \
           < $locdict/lexiconp.txt > $tmpdir/lexiconp.original || exit 1;

  # create $tmpdir/phone_map.txt
  # this has the format (on each line)
  # <original phone> <version 1 of original phone> <version 2> ...
  # where the versions depend on the position of the phone within a word.
  # For instance, we'd have:
  # AA AA_B AA_E AA_I AA_S
  # for (B)egin, (E)nd, (I)nternal and (S)ingleton
  # and in the case of silence
  # SIL SIL SIL_B SIL_E SIL_I SIL_S
  # [because SIL on its own is one of the variants; this is for when it doesn't
  #  occur inside a word but as an option in the lexicon.]

  # This phone map expands the phone lists into all the word-position-dependent
  # versions of the phone lists.

  cat <(for x in `cat $locdict/silence_phones.txt`; do for y in "" "" "_B" "_E" "_I" "_S"; do echo -n "$x$y "; done; echo; done) \
    <(for x in `cat $locdict/nonsilence_phones.txt`; do for y in "" "_B" "_E" "_I" "_S"; do echo -n "$x$y "; done; echo; done) \
    > $tmpdir/phone_map.txt
else
  cp $locdict/lexiconp.txt $tmpdir/lexiconp.original
  cat $locdict/silence_phones.txt $locdict/nonsilence_phones.txt | \
    sed 's/ /\n/g' | awk '(NF>0){print}' > $tmpdir/phones
  paste -d' ' $tmpdir/phones $tmpdir/phones > $tmpdir/phone_map.txt
fi

if $reverse; then
  echo "reversing lexicon."
  cat $tmpdir/lexiconp.original \
    | awk '{printf "%s %s ",$1, $2;for(i=NF;i>2;i--){printf "%s ",$i;}printf "\n"}' \
    > $tmpdir/lexiconp.txt
else
  mv $tmpdir/lexiconp.original $tmpdir/lexiconp.txt
fi

mkdir -p $lang/phones  # various sets of phones...

# Sets of phones for use in clustering, and making monophone systems.

if $share_silence_phones; then
  # build a roots file that will force all the silence phones to share the
  # same pdf's. [three distinct states, only the transitions will differ.]
  # 'shared'/'not-shared' means, do we share the 3 states of the HMM
  # in the same tree-root?
  # Sharing across models(phones) is achieved by writing several phones
  # into one line of roots.txt (shared/not-shared doesn't affect this).
  # 'shared split' means we have 1 tree-root for the 3 states of the HMM
  # (but we get to ask about the HMM-position when we split).
  # 'not-shared not-split' means we have separate tree roots for the 3 states,
  # but we never split the tree so they remain stumps
  # so all phones in the line correspond to the same model.

  if $make_individual_sil_models; then
    nsil=`wc $locdict/silence_phones.txt | awk '{printf $1}'`
    cat $locdict/silence_phones.txt | awk '{printf("%s\n", $0); }' | cat - $locdict/nonsilence_phones.txt | \
      utils/apply_map.pl $tmpdir/phone_map.txt > $lang/phones/sets.txt
    cat $lang/phones/sets.txt | \
      awk -v nsil=$nsil '{if(NR<=nsil) print "not-shared", "not-split", $0; else print "shared", "split", $0;}' > $lang/phones/roots.txt
  else
    cat $locdict/silence_phones.txt | awk '{printf("%s ", $0); } END{printf("\n");}' | cat - $locdict/nonsilence_phones.txt | \
      utils/apply_map.pl $tmpdir/phone_map.txt > $lang/phones/sets.txt
    cat $lang/phones/sets.txt | \
      awk '{if(NR==1) print "not-shared", "not-split", $0; else print "shared", "split", $0;}' > $lang/phones/roots.txt
  fi
else
  # different silence phones will have different GMMs.  [note: here, all "shared split" means
  # is that we may have one GMM for all the states, or we can split on states.  because they're
  # context-independent phones, they don't see the context.]
  cat $locdict/{,non}silence_phones.txt | utils/apply_map.pl $tmpdir/phone_map.txt > $lang/phones/sets.txt
  cat $lang/phones/sets.txt | awk '{print "shared", "split", $0;}' > $lang/phones/roots.txt
fi

cat $locdict/silence_phones.txt | utils/apply_map.pl $tmpdir/phone_map.txt | \
 awk '{for(n=1;n<=NF;n++) print $n;}' > $lang/phones/silence.txt
cat $locdict/nonsilence_phones.txt | utils/apply_map.pl $tmpdir/phone_map.txt | \
 awk '{for(n=1;n<=NF;n++) print $n;}' > $lang/phones/nonsilence.txt
cp $locdict/optional_silence.txt $lang/phones/optional_silence.txt
cp $lang/phones/silence.txt $lang/phones/context_indep.txt

cat $locdict/extra_questions.txt | utils/apply_map.pl $tmpdir/phone_map.txt \
  >$lang/phones/extra_questions.txt

# Want extra questions about the word-start/word-end stuff. Make it separate for
# silence and non-silence. Probably doesn't matter, as silence will rarely
# be inside a word.
if $position_dependent_phones; then
  for suffix in _B _E _I _S; do
    (for x in `cat $locdict/nonsilence_phones.txt`; do echo -n "$x$suffix "; done; echo) >>$lang/phones/extra_questions.txt
  done
  for suffix in "" _B _E _I _S; do
    (for x in `cat $locdict/silence_phones.txt`; do echo -n "$x$suffix "; done; echo) >>$lang/phones/extra_questions.txt
  done
fi

# add disambig symbols to the lexicon in $tmpdir/lexiconp.txt
# and produce $tmpdir/lexicon_disambig.txt

ndisambig=`utils/add_lex_disambig.pl --pron-probs $tmpdir/lexiconp.txt $tmpdir/lexiconp_disambig.txt`
ndisambig=$[$ndisambig+1]; # add one disambig symbol for silence in lexicon FST.
echo $ndisambig > $tmpdir/lex_ndisambig

# Format of lexiconp_disambig.txt:
# !SIL	1.0   SIL_S
# <SPOKEN_NOISE>	1.0   SPN_S #1
# <UNK>	1.0  SPN_S #2
# <NOISE>	1.0  NSN_S
# !EXCLAMATION-POINT	1.0  EH2_B K_I S_I K_I L_I AH0_I M_I EY1_I SH_I AH0_I N_I P_I OY2_I N_I T_E

( for n in `seq 0 $ndisambig`; do echo '#'$n; done ) >$lang/phones/disambig.txt

# Create phone symbol table.
echo "<eps>" | cat - $lang/phones/{silence,nonsilence,disambig}.txt | \
  awk '{n=NR-1; print $1, n;}' > $lang/phones.txt

# Create a file that describes the word-boundary information for
# each phone.  5 categories.
if $position_dependent_phones; then
  cat $lang/phones/{silence,nonsilence}.txt | \
    awk '/_I$/{print $1, "internal"; next;} /_B$/{print $1, "begin"; next; }
         /_S$/{print $1, "singleton"; next;} /_E$/{print $1, "end"; next; }
         {print $1, "nonword";} ' > $lang/phones/word_boundary.txt
else
  # word_boundary.txt might have been generated by another source
  [ -f $locdict/word_boundary.txt ] && cp $locdict/word_boundary.txt $lang/phones/word_boundary.txt
fi

# Create word symbol table.
cat $tmpdir/lexiconp.txt | awk '{print $1}' | sort | uniq  | \
 awk 'BEGIN{print "<eps> 0";} {printf("%s %d\n", $1, NR);} END{printf("#0 %d\n", NR+1);} ' \
  > $lang/words.txt || exit 1;

# format of $lang/words.txt:
#<eps> 0
#!EXCLAMATION-POINT 1
#!SIL 2
#"CLOSE-QUOTE 3
#...

silphone=`cat $locdict/optional_silence.txt` || exit 1;
[ -z "$silphone" ] && \
  ( echo "You have no optional-silence phone; it is required in the current scripts"
    echo "but you may use the option --sil-prob 0.0 to stop it being used." ) && \
   exit 1;

# create $lang/phones/align_lexicon.{txt,int}.
# This is the new-new style of lexicon aligning.

# First remove pron-probs from the lexicon.
perl -ape 's/(\S+\s+)\S+\s+(.+)/$1$2/;' <$tmpdir/lexiconp.txt >$tmpdir/align_lexicon.txt

# Note: here, $silphone will have no suffix e.g. _S because it occurs as optional-silence,
# and is not part of a word.
[ ! -z "$silphone" ] && echo "<eps> $silphone" >> $tmpdir/align_lexicon.txt

cat $tmpdir/align_lexicon.txt | \
 perl -ane '@A = split; print $A[0], " ", join(" ", @A), "\n";' | sort | uniq > $lang/phones/align_lexicon.txt

# create phones/align_lexicon.int
cat $lang/phones/align_lexicon.txt | utils/sym2int.pl -f 3- $lang/phones.txt | \
  utils/sym2int.pl -f 1-2 $lang/words.txt > $lang/phones/align_lexicon.int

# Create the basic L.fst without disambiguation symbols, for use
# in training.
utils/make_lexicon_fst.pl --pron-probs $tmpdir/lexiconp.txt $sil_prob $silphone | \
  fstcompile --isymbols=$lang/phones.txt --osymbols=$lang/words.txt \
  --keep_isymbols=false --keep_osymbols=false | \
   fstarcsort --sort_type=olabel > $lang/L.fst || exit 1;

# The file oov.txt contains a word that we will map any OOVs to during
# training.
echo "$oov_word" > $lang/oov.txt || exit 1;
cat $lang/oov.txt | utils/sym2int.pl $lang/words.txt >$lang/oov.int || exit 1;
# integer version of oov symbol, used in some scripts.


# Create these lists of phones in colon-separated integer list form too,
# for purposes of being given to programs as command-line options.
for f in silence nonsilence optional_silence disambig context_indep; do
  utils/sym2int.pl $lang/phones.txt <$lang/phones/$f.txt >$lang/phones/$f.int
  utils/sym2int.pl $lang/phones.txt <$lang/phones/$f.txt | \
   awk '{printf(":%d", $1);} END{printf "\n"}' | sed s/:// > $lang/phones/$f.csl || exit 1;
done

for x in sets extra_questions; do
  utils/sym2int.pl $lang/phones.txt <$lang/phones/$x.txt > $lang/phones/$x.int || exit 1;
done

utils/sym2int.pl -f 3- $lang/phones.txt <$lang/phones/roots.txt \
   > $lang/phones/roots.int || exit 1;

#if $position_dependent_phones; then
if [ -f $lang/phones/word_boundary.txt ]; then
  utils/sym2int.pl -f 1 $lang/phones.txt <$lang/phones/word_boundary.txt \
    > $lang/phones/word_boundary.int || exit 1;
fi

silphonelist=`cat $lang/phones/silence.csl`
nonsilphonelist=`cat $lang/phones/nonsilence.csl`
utils/gen_topo.pl $num_nonsil_states $num_sil_states $nonsilphonelist $silphonelist >$lang/topo


# Create the lexicon FST with disambiguation symbols, and put it in lang_test.
# There is an extra step where we create a loop to "pass through" the
# disambiguation symbols from G.fst.
phone_disambig_symbol=`grep \#0 $lang/phones.txt | awk '{print $2}'`
word_disambig_symbol=`grep \#0 $lang/words.txt | awk '{print $2}'`

utils/make_lexicon_fst.pl --pron-probs $tmpdir/lexiconp_disambig.txt $sil_prob $silphone '#'$ndisambig | \
   fstcompile --isymbols=$lang/phones.txt --osymbols=$lang/words.txt \
   --keep_isymbols=false --keep_osymbols=false |   \
   fstaddselfloops  "echo $phone_disambig_symbol |" "echo $word_disambig_symbol |" | \
   fstarcsort --sort_type=olabel > $lang/L_disambig.fst || exit 1;


echo "$(basename $0): validating output directory"
! utils/validate_lang.pl $lang && echo "$(basename $0): error validating output" &&  exit 1;

#######################################################################
#                     local/vystadial_create_G.sh                     #
#######################################################################
# run.sh:40 local/vystadial_create_G.sh "$test_sets_ext" || exit 1
#!/bin/bash

# Copyright 2012 Vassil Panayotov
#           2013 Ondrej Platek
# Apache 2.0

echo "--- Formating data ..."

echo "--- Preparing the grammar transducer (G.fst) ..."
mkdir -p $tmpdir

for f in phones.txt words.txt phones.txt L.fst L_disambig.fst phones/; do
    # FIXME just a test
    ls $lang/$f
done
cat $lm_arpa | \
   utils/find_arpa_oovs.pl $lang/words.txt > $tmpdir/oovs.txt

 # grep -v '<s> <s>' because the LM seems to have some strange and useless
 # stuff in it with multiple <s>'s in the history.  Encountered some other similar
 # things in a LM from Geoff.  Removing all "illegal" combinations of <s> and </s>,
 # which are supposed to occur only at being/end of utt.  These can cause
 # determinization failures of CLG [ends up being epsilon cycles].

cat $lm_arpa | \
  grep -v '<s> <s>\|</s> <s>\|</s> </s>' | \
  arpa2fst - | fstprint | \
  utils/remove_oovs.pl $tmpdir/oovs.txt | \
  utils/eps2disambig.pl | utils/s2eps.pl | fstcompile --isymbols=$lang/words.txt \
    --osymbols=$lang/words.txt  --keep_isymbols=false --keep_osymbols=false | \
  fstrmepsilon > $lang/G.fst
fstisstochastic $lang/G.fst
# The output is like:
# 9.14233e-05 -0.259833
# we do expect the first of these 2 numbers to be close to zero (the second is
# nonzero because the backoff weights make the states sum to >1).
# Because of the <s> fiasco for these particular LMs, the first number is not
# as close to zero as it could be.

# Everything below is only for diagnostic.
# Checking that G has no cycles with empty words on them (e.g. <s>, </s>);
# this might cause determinization failure of CLG.
# #0 is treated as an empty word.
mkdir -p $tmpdir/g
awk '{if(NF==1){ printf("0 0 %s %s\n", $1,$1); }} END{print "0 0 #0 #0"; print "0";}' \
  < "$locdict/lexicon.txt"  >$tmpdir/g/select_empty.fst.txt
fstcompile --isymbols=$lang/words.txt --osymbols=$lang/words.txt \
  $tmpdir/g/select_empty.fst.txt | \
fstarcsort --sort_type=olabel | fstcompose - $lang/G.fst > $tmpdir/g/empty_words.fst
fstinfo $tmpdir/g/empty_words.fst | grep cyclic | grep -w 'y' &&
  echo "Language model has cycles with empty words" && exit 1

echo "*** Succeeded in creating G.fst for $lang"


#######################################################################
#                         s5/utils/mkgraph.sh                         #
#######################################################################
# run.sh:88 utils/mkgraph.sh $lang exp/tri2 exp/tri2/graph || exit 1;
#!/bin/bash
# Copyright 2010-2012 Microsoft Corporation
#           2012-2013 Johns Hopkins University (Author: Daniel Povey)
# Apache 2.0

# This script creates a fully expanded decoding graph (HCLG) that represents
# all the language-model, pronunciation dictionary (lexicon), context-dependency,
# and HMM structure in our model.  The output is a Finite State Transducer
# that has word-ids on the output, and pdf-ids on the input (these are indexes
# that resolve to Gaussian Mixture Models).
# See
#  http://kaldi.sourceforge.net/graph_recipe_test.html
# (this is compiled from this repository using Doxygen,
# the source for this part is in src/doc/graph_recipe_test.dox)


# N=3
# P=1
# reverse_h=false
#
# for x in `seq 2`; do
#   [ "$1" == "--mono" ] && N=1 && P=0 && shift;
#   [ "$1" == "--quinphone" ] && N=5 && P=2 && shift;
#   [ "$1" == "--reverse-h" ] && reverse_h=true && shift;
# done
#
# if [ $# != 3 ]; then
#    echo "Usage: utils/mkgraph.sh [options] <lang-dir> <model-dir> <graphdir>"
#    echo "e.g.: utils/mkgraph.sh $lang exp/tri1/ exp/tri1/graph"
#    echo " Options:"
#    echo " --mono          #  For monophone models."
#    echo " --quinphone     #  For models with 5-phone context (3 is default)"
#    exit 1;
# fi


mkdir -p $dir

tscale=1.0
loopscale=0.1

# If $lang/tmp/LG.fst does not exist or is older than its sources, make it...
# (note: the [[ ]] brackets make the || type operators work (inside [ ], we
# would have to use -o instead),  -f means file exists, and -ot means older than).

required="$lang/L.fst $lang/G.fst $lang/phones.txt $lang/words.txt $lang/phones/silence.csl $lang/phones/disambig.int $model $tree"
for f in $required; do
  [ ! -f $f ] && echo "mkgraph.sh: expected $f to exist" && exit 1;
done

mkdir -p $lang/tmp
# Note: [[ ]] is like [ ] but enables certain extra constructs, e.g. || in
# place of -o
if [[ ! -s $lang/tmp/LG.fst || $lang/tmp/LG.fst -ot $lang/G.fst || \
      $lang/tmp/LG.fst -ot $lang/L_disambig.fst ]]; then
  fsttablecompose $lang/L_disambig.fst $lang/G.fst | fstdeterminizestar --use-log=true | \
    fstminimizeencoded  > $lang/tmp/LG.fst || exit 1;
  fstisstochastic $lang/tmp/LG.fst || echo "[info]: LG not stochastic."
fi


clg=$lang/tmp/CLG_${N}_${P}.fst

if [[ ! -s $clg || $clg -ot $lang/tmp/LG.fst ]]; then
  fstcomposecontext --context-size=$N --central-position=$P \
   --read-disambig-syms=$lang/phones/disambig.int \
   --write-disambig-syms=$lang/tmp/disambig_ilabels_${N}_${P}.int \
    $lang/tmp/ilabels_${N}_${P} < $lang/tmp/LG.fst >$clg
  fstisstochastic $clg  || echo "[info]: CLG not stochastic."
fi

if [[ ! -s $dir/Ha.fst || $dir/Ha.fst -ot $model  \
    || $dir/Ha.fst -ot $lang/tmp/ilabels_${N}_${P} ]]; then
  if $reverse_h; then
    make-h-transducer --reverse=true --push_weights=true \
      --disambig-syms-out=$dir/disambig_tid.int \
      --transition-scale=$tscale $lang/tmp/ilabels_${N}_${P} $tree $model \
      > $dir/Ha.fst  || exit 1;
  else
    make-h-transducer --disambig-syms-out=$dir/disambig_tid.int \
      --transition-scale=$tscale $lang/tmp/ilabels_${N}_${P} $tree $model \
       > $dir/Ha.fst  || exit 1;
  fi
fi

if [[ ! -s $dir/HCLGa.fst || $dir/HCLGa.fst -ot $dir/Ha.fst || \
      $dir/HCLGa.fst -ot $clg ]]; then
  fsttablecompose $dir/Ha.fst $clg | fstdeterminizestar --use-log=true \
    | fstrmsymbols $dir/disambig_tid.int | fstrmepslocal | \
     fstminimizeencoded > $dir/HCLGa.fst || exit 1;
  fstisstochastic $dir/HCLGa.fst || echo "HCLGa is not stochastic"
fi

if [[ ! -s $dir/HCLG.fst || $dir/HCLG.fst -ot $dir/HCLGa.fst ]]; then
  add-self-loops --self-loop-scale=$loopscale --reorder=true \
    $model < $dir/HCLGa.fst > $dir/HCLG.fst || exit 1;

  if [ $tscale == 1.0 -a $loopscale == 1.0 ]; then
    # No point doing this test if transition-scale not 1, as it is bound to fail.
    fstisstochastic $dir/HCLG.fst || echo "[info]: final HCLG is not stochastic."
  fi
fi

# keep a copy of the lexicon and a list of silence phones with HCLG...
# this means we can decode without reference to the $lang directory.


cp $lang/words.txt $dir/ || exit 1;
mkdir -p $dir/phones
cp $lang/phones/disambig.{txt,int} $dir/phones/ 2> /dev/null
cp $lang/phones/silence.csl $dir/phones/ || exit 1;
cp $lang/phones.txt $dir/ 2> /dev/null # ignore the error if it's not there.

# to make const fst:
# fstconvert --fst_type=const $dir/HCLG.fst $dir/HCLG_c.fst

